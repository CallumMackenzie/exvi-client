Index: compose/src/commonMain/kotlin/com/camackenzie/exvi/client/view/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.camackenzie.exvi.client.view\r\n\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.mapSaver\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport com.camackenzie.exvi.client.model.APIInfo\r\nimport com.camackenzie.exvi.client.model.Account\r\nimport com.camackenzie.exvi.client.model.Model\r\nimport com.camackenzie.exvi.core.api.NoneResult\r\nimport com.camackenzie.exvi.core.model.ExviSerializer\r\nimport com.camackenzie.exvi.core.util.ExviLogger\r\nimport com.camackenzie.exvi.core.util.SelfSerializable\r\nimport com.camackenzie.exvi.core.util.cached\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.serialization.KSerializer\r\nimport kotlinx.serialization.Serializable\r\n\r\n// App version to ensure compatibility with server\r\nprivate const val APP_VERSION = 6\r\n\r\n/**\r\n * The entry function for the app\r\n */\r\n@Composable\r\nfun App() {\r\n    // Coroutine scope which persists across the entire application lifecycle\r\n    val coroutineScope = rememberCoroutineScope()\r\n    // Global application state\r\n    val appState by rememberSaveable(stateSaver = AppState.saver(coroutineScope)) {\r\n        mutableStateOf(\r\n            AppState(coroutineScope = coroutineScope)\r\n        )\r\n    }\r\n    // Compose current view\r\n    appState.currentView.compose(appState)\r\n}\r\n\r\n/**\r\n * All possible screens\r\n */\r\n@Serializable\r\nenum class ExviView(\r\n    private val viewFun: Viewable\r\n) : SelfSerializable {\r\n    Login(EntryView),\r\n    Signup(SignupView),\r\n    Home(HomeView),\r\n    WorkoutCreation(WorkoutCreationView),\r\n    ActiveWorkout(ActiveWorkoutView),\r\n    None(ErrorView),\r\n    Error(ErrorView),\r\n    Friends(FriendView),\r\n    InvalidAppVersion(InvalidAppVersionView);\r\n\r\n    @Composable\r\n    fun compose(appState: AppState) = viewFun.View(appState)\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    override val serializer: KSerializer<SelfSerializable>\r\n        get() = serializer() as KSerializer<SelfSerializable>\r\n}\r\n\r\n/**\r\n * A class to manage global application state\r\n */\r\nclass AppState(\r\n    val model: Model = Model(),\r\n    currentView: ExviView = ExviView.Login,\r\n    previousView: ExviView = ExviView.None,\r\n    provided: SelfSerializable = NoneResult(),\r\n    val coroutineScope: CoroutineScope,\r\n    private val processRestartInit: Boolean = false\r\n) {\r\n    // The current view\r\n    var currentView by mutableStateOf(currentView)\r\n        private set\r\n\r\n    // The previous view\r\n    var previousView by mutableStateOf(previousView)\r\n        private set\r\n\r\n    // The arguments provided to the current view by the previous\r\n    var provided by mutableStateOf(provided)\r\n        private set\r\n\r\n    // System-persistent cross-platform application state\r\n    val settings\r\n        get() = model.settings\r\n\r\n    init {\r\n        try {\r\n            // If the process is not being restarted and the active user is cached locally\r\n            // then restore the active user and set the view to their home\r\n            if (!processRestartInit && settings.hasKey(\"activeUser\")) {\r\n                model.accountManager.activeAccount = Account.fromCrendentialsString(settings.getString(\"activeUser\"))\r\n                ExviLogger.i { \"Restored user session for ${model.activeAccount!!.username}\" }\r\n                setView(ExviView.Home)\r\n            }\r\n\r\n            // If process is not restarting, ensure app version is compatible with server\r\n            if (!processRestartInit) {\r\n                APIInfo.checkAppCompatibility(APP_VERSION,\r\n                    coroutineScope,\r\n                    onFail = {\r\n                        if (it.statusCode != 418)\r\n                            setView(ExviView.InvalidAppVersion)\r\n                    }, onSuccess = {\r\n                        ExviLogger.i { \"App version validated\" }\r\n                    })\r\n            }\r\n        } catch (ex: Exception) {\r\n            error(ex)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tell the application a fatal error has occurred\r\n     */\r\n    fun error(e: Exception) {\r\n        ExviLogger.e(e, tag = \"GUI\") { \"Uncaught Exception: $e\" }\r\n        error(e.toString())\r\n    }\r\n\r\n    fun error(e: String) {\r\n        setView(ExviView.Error, e.cached())\r\n    }\r\n\r\n    /**\r\n     * Should be called when a fatal error occurs in the application\r\n     * to attempt to fix said error\r\n     */\r\n    fun repair() {\r\n        model.repair()\r\n        setView(ExviView.Login)\r\n    }\r\n\r\n    /**\r\n     * @param view the view to set\r\n     * @param args a lambda to provide arguments to the new view\r\n     */\r\n    fun setView(view: ExviView, args: () -> SelfSerializable = ::noArgs) {\r\n        previousView = currentView\r\n        currentView = view\r\n        provided = args()\r\n    }\r\n\r\n    /**\r\n     * @param view the view to set\r\n     * @param args the arguments to give the new view\r\n     */\r\n    fun setView(view: ExviView, args: SelfSerializable) = setView(view) { args }\r\n\r\n    companion object {\r\n\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        fun saver(coroutineScope: CoroutineScope) = mapSaver(\r\n            save = {\r\n                mapOf(\r\n                    \"currView\" to it.currentView.toJson(),\r\n                    \"prevView\" to it.previousView.toJson(),\r\n                    \"provided\" to ExviSerializer.toJson(it.provided),\r\n                    \"model\" to it.model.toJson()\r\n                )\r\n            },\r\n            restore = {\r\n                AppState(\r\n                    model = ExviSerializer.fromJson(it[\"model\"] as String),\r\n                    currentView = ExviSerializer.fromJson(it[\"currView\"] as String),\r\n                    previousView = ExviSerializer.fromJson(it[\"prevView\"] as String),\r\n                    provided = ExviSerializer.fromJson(it[\"provided\"] as String),\r\n                    coroutineScope = coroutineScope,\r\n                    processRestartInit = true\r\n                )\r\n            }\r\n        )\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/compose/src/commonMain/kotlin/com/camackenzie/exvi/client/view/App.kt b/compose/src/commonMain/kotlin/com/camackenzie/exvi/client/view/App.kt
--- a/compose/src/commonMain/kotlin/com/camackenzie/exvi/client/view/App.kt	
+++ b/compose/src/commonMain/kotlin/com/camackenzie/exvi/client/view/App.kt	
@@ -16,7 +16,7 @@
 import kotlinx.serialization.Serializable
 
 // App version to ensure compatibility with server
-private const val APP_VERSION = 6
+private const val APP_VERSION = 7
 
 /**
  * The entry function for the app
